<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Clerk\Backend\Models\Operations;


class CreateUserRequestBody
{
    /**
     * Email addresses to add to the user.
     *
     * Must be unique across your instance.
     * The first email address will be set as the user's primary email address.
     *
     * @var ?array<string> $emailAddress
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('email_address')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $emailAddress = null;

    /**
     * Phone numbers to add to the user.
     *
     * Must be unique across your instance.
     * The first phone number will be set as the user's primary phone number.
     *
     * @var ?array<string> $phoneNumber
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('phone_number')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $phoneNumber = null;

    /**
     * Web3 wallets to add to the user.
     *
     * Must be unique across your instance.
     * The first wallet will be set as the user's primary wallet.
     *
     * @var ?array<string> $web3Wallet
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('web3_wallet')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $web3Wallet = null;

    /**
     * In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.
     *
     * The digests should be generated with one of the supported algorithms.
     * The hashing algorithm can be specified using the `password_hasher` property.
     *
     * @var ?string $passwordDigest
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('password_digest')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $passwordDigest = null;

    /**
     * The hashing algorithm that was used to generate the password digest.
     *
     *
     * The algorithms we support at the moment are [`bcrypt`](https://en.wikipedia.org/wiki/Bcrypt), [`bcrypt_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/), [`md5`](https://en.wikipedia.org/wiki/MD5), `pbkdf2_sha1`, `pbkdf2_sha256`, [`pbkdf2_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
     * [`phpass`](https://www.openwall.com/phpass/), [`scrypt_firebase`](https://firebaseopensource.com/projects/firebase/scrypt/),
     * [`scrypt_werkzeug`](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash), [`sha256`](https://en.wikipedia.org/wiki/SHA-2),
     * and the [`argon2`](https://argon2.online/) variants: `argon2i` and `argon2id`.
     *
     * Each of the supported hashers expects the incoming digest to be in a particular format. See the [Clerk docs](https://clerk.com/docs/references/backend/user/create-user) for more information.
     *
     * @var ?string $passwordHasher
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('password_hasher')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $passwordHasher = null;

    /**
     * When set to `true` all password checks are skipped.
     *
     * It is recommended to use this method only when migrating plaintext passwords to Clerk.
     * Upon migration the user base should be prompted to pick stronger password.
     *
     * @var ?bool $skipPasswordChecks
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('skip_password_checks')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $skipPasswordChecks = null;

    /**
     * When set to `true`, `password` is not required anymore when creating the user and can be omitted.
     *
     * This is useful when you are trying to create a user that doesn't have a password, in an instance that is using passwords.
     * Please note that you cannot use this flag if password is the only way for a user to sign into your instance.
     *
     * @var ?bool $skipPasswordRequirement
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('skip_password_requirement')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $skipPasswordRequirement = null;

    /**
     * In case TOTP is configured on the instance, you can provide the secret to enable it on the newly created user without the need to reset it.
     *
     * Please note that currently the supported options are:
     * * Period: 30 seconds
     * * Code length: 6 digits
     * * Algorithm: SHA1
     *
     * @var ?string $totpSecret
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('totp_secret')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $totpSecret = null;

    /**
     * If Backup Codes are configured on the instance, you can provide them to enable it on the newly created user without the need to reset them.
     *
     * You must provide the backup codes in plain format or the corresponding bcrypt digest.
     *
     * @var ?array<string> $backupCodes
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('backup_codes')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $backupCodes = null;

    /**
     * Metadata saved on the user, that is visible to both your Frontend and Backend APIs
     *
     * @var ?array<string, mixed> $publicMetadata
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('public_metadata')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, mixed>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $publicMetadata = null;

    /**
     * Metadata saved on the user, that is only visible to your Backend API
     *
     * @var ?array<string, mixed> $privateMetadata
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('private_metadata')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, mixed>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $privateMetadata = null;

    /**
     * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
     *
     * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
     *
     * @var ?array<string, mixed> $unsafeMetadata
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('unsafe_metadata')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, mixed>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $unsafeMetadata = null;

    /**
     * A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
     *
     * @var ?string $createdAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('created_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $createdAt = null;

    /**
     * The ID of the user as used in your external systems or your previous authentication solution.
     *
     * Must be unique across your instance.
     *
     * @var ?string $externalId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('external_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $externalId = null;

    /**
     * The first name to assign to the user
     *
     * @var ?string $firstName
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('first_name')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $firstName = null;

    /**
     * The last name to assign to the user
     *
     * @var ?string $lastName
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('last_name')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $lastName = null;

    /**
     * The username to give to the user.
     *
     * It must be unique across your instance.
     *
     * @var ?string $username
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('username')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $username = null;

    /**
     * The plaintext password to give the user.
     *
     * Must be at least 8 characters long, and can not be in any list of hacked passwords.
     *
     * @var ?string $password
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('password')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $password = null;

    /**
     * If enabled, user can delete themselves via FAPI.
     *
     *
     *
     * @var ?bool $deleteSelfEnabled
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('delete_self_enabled')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $deleteSelfEnabled = null;

    /**
     * A custom timestamp denoting _when_ the user accepted legal requirements, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
     *
     * @var ?string $legalAcceptedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('legal_accepted_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $legalAcceptedAt = null;

    /**
     * When set to `true` all legal checks are skipped.
     *
     * It is not recommended to skip legal checks unless you are migrating a user to Clerk.
     *
     * @var ?bool $skipLegalChecks
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('skip_legal_checks')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $skipLegalChecks = null;

    /**
     * If enabled, user can create organizations via FAPI.
     *
     *
     *
     * @var ?bool $createOrganizationEnabled
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('create_organization_enabled')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $createOrganizationEnabled = null;

    /**
     * The maximum number of organizations the user can create. 0 means unlimited.
     *
     *
     *
     * @var ?int $createOrganizationsLimit
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('create_organizations_limit')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $createOrganizationsLimit = null;

    /**
     * @param  ?array<string>  $emailAddress
     * @param  ?array<string>  $phoneNumber
     * @param  ?array<string>  $web3Wallet
     * @param  ?string  $passwordDigest
     * @param  ?string  $passwordHasher
     * @param  ?bool  $skipPasswordChecks
     * @param  ?bool  $skipPasswordRequirement
     * @param  ?string  $totpSecret
     * @param  ?array<string>  $backupCodes
     * @param  ?array<string, mixed>  $publicMetadata
     * @param  ?array<string, mixed>  $privateMetadata
     * @param  ?array<string, mixed>  $unsafeMetadata
     * @param  ?string  $createdAt
     * @param  ?string  $externalId
     * @param  ?string  $firstName
     * @param  ?string  $lastName
     * @param  ?string  $username
     * @param  ?string  $password
     * @param  ?bool  $deleteSelfEnabled
     * @param  ?string  $legalAcceptedAt
     * @param  ?bool  $skipLegalChecks
     * @param  ?bool  $createOrganizationEnabled
     * @param  ?int  $createOrganizationsLimit
     * @phpstan-pure
     */
    public function __construct(?array $emailAddress = null, ?array $phoneNumber = null, ?array $web3Wallet = null, ?string $passwordDigest = null, ?string $passwordHasher = null, ?bool $skipPasswordChecks = null, ?bool $skipPasswordRequirement = null, ?string $totpSecret = null, ?array $backupCodes = null, ?array $publicMetadata = null, ?array $privateMetadata = null, ?array $unsafeMetadata = null, ?string $createdAt = null, ?string $externalId = null, ?string $firstName = null, ?string $lastName = null, ?string $username = null, ?string $password = null, ?bool $deleteSelfEnabled = null, ?string $legalAcceptedAt = null, ?bool $skipLegalChecks = null, ?bool $createOrganizationEnabled = null, ?int $createOrganizationsLimit = null)
    {
        $this->emailAddress = $emailAddress;
        $this->phoneNumber = $phoneNumber;
        $this->web3Wallet = $web3Wallet;
        $this->passwordDigest = $passwordDigest;
        $this->passwordHasher = $passwordHasher;
        $this->skipPasswordChecks = $skipPasswordChecks;
        $this->skipPasswordRequirement = $skipPasswordRequirement;
        $this->totpSecret = $totpSecret;
        $this->backupCodes = $backupCodes;
        $this->publicMetadata = $publicMetadata;
        $this->privateMetadata = $privateMetadata;
        $this->unsafeMetadata = $unsafeMetadata;
        $this->createdAt = $createdAt;
        $this->externalId = $externalId;
        $this->firstName = $firstName;
        $this->lastName = $lastName;
        $this->username = $username;
        $this->password = $password;
        $this->deleteSelfEnabled = $deleteSelfEnabled;
        $this->legalAcceptedAt = $legalAcceptedAt;
        $this->skipLegalChecks = $skipLegalChecks;
        $this->createOrganizationEnabled = $createOrganizationEnabled;
        $this->createOrganizationsLimit = $createOrganizationsLimit;
    }
}